<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gödel!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
	
<!-- 	<section>
<title>gengszterek</title>
        <para>Gengszterek rendezése lambdával a Robotautó Világbajnokságban
https://youtu.be/DL6iQwPx1Yw (8:05-től)</para>
	</section>-->

	<section>
	<title>C++11 Custom Allocator</title>
	<para>https://prezi.com/jvvbytkwgsxj/high-level-programming-languages-2-c11-allocators/ a
CustomAlloc-os példa, lásd C forrást az UDPROG repóban!</para>
	<para>forráskód:<link xlink:href="https://github.com/ghjbku/prog2/tree/master/godel/">github link</link> </para>
<programlisting language="c++"><![CDATA[template<class T>
class TrackingAllocator
{
public:
    using value_type = T;

    using pointer = T *;
    using const_pointer = const T *;

    using size_type = size_t;

    TrackingAllocator() = default;

    template<class U>
    TrackingAllocator(const TrackingAllocator<U> &other) {}

    ~TrackingAllocator() = default;]]></programlisting>
    <para>A template segítségével bármilyen típusra alkalmazható az allokátor, a használni kívánt
     paramétereket a <command>using </command>kulcsszóval ellátott parancsok-nál láthatjuk.
     Maga a <command>T</command> lesz az értéktípus, a pointer ugyebár egy T típusú pointer lesz, ugyanez a constans pointer is, csak a const kulcsszóval ellátva,
     Továbbá deklarálunk egy méret-típust is a <command>size_t</command>-re.</para>
     <para>Láthatjuk továbbá a konstruktort és dekonstruktort, melyekhez a default értéket párosítjuk.
     Ez az érték a compiler felé utasítást ad, miszerint ha nem adunk más értéket, akkor a compiler maga fog egy alapértelmezett értéket adni.
     Látható még egy fúrcsa szócska a <command><![CDATA[template<class U]]></command> sor után, az a bizonyos <command><![CDATA[&other]]></command>.
     Ez egy ún. referencia, ez a referált érték memóriahelyét kapja, nincs külön memóriahelye.
     Itt a TrackingAllocator osztályon egy ún. overload-ot hajtunk végre.</para>
    <programlisting language="c++"><![CDATA[class TrackingAllocator
{
.
.
.

pointer allocate(size_type numObjects)
    {
        mAllocations += numObjects;
        return static_cast<pointer>(operator new(sizeof(T) * numObjects));
    }

    void deallocate(pointer p, size_type numObjects)
    {
        operator delete(p);
    }

]]></programlisting>
<para>A programkód legfontosabb részletei az allokációért felelős <command>allocate</command> és a deallokációért felelős <command>deallocate</command> függvények.
Ezek a TrackingAllocator osztályban foglalnak helyet.</para>
<para>az <command>allocate</command> függvényben láthatjuk, hogy a visszatérési értékben allokáljuk az új
memóriahelyeket a new funkcióval, melyben megszámoljuk a T méretét, majd azt megszorozzuk az objektumok számával, amit ugye paraméterként kap az allokációs függvény
.
Ez egy ún. operátor túlterhelés/overload.
Ezt az egészet egy static_cast-al átkonvertáljuk pointer típussá, és ezt a pointert fogja majd a függvényünk visszaadni.
Ez a metódus a fordítás során castolja át a megadott paraméterként kapott értéket.
Na persze ebben a függvényben adjuk az mAllocations változónak az értéket is, melyet majd a végén használunk fel, hogy megkapjuk, mennyi memóriahelyet allokáltunk.</para>
	 <figure>
            <title>
                Az
                <type>allokátor</type>
                futás
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="godel/alloc.png" scale="250" />
                </imageobject>
                <textobject>
                    <phrase>
                        Az
                        <type>allokátor</type>
                        futás
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>

<programlisting language="c++"><![CDATA[std::cout << "allokált memóriahelyek címe:"<< std::endl;
    for(auto i=0;i<=v.size();++i){

        std::cout << &v[i] << std::endl;
    }]]></programlisting><para>A memóriahelyek címe és a program futása.</para>

    <figure>
            <title>
                Az
                <type>allokátor2</type>
                futás
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="godel/alloc2.png" scale="250" />
                </imageobject>
                <textobject>
                    <phrase>
                        Az
                        <type>allokátor2</type>
                        futás
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>

    </section>

	<section>
	<title>STL map érték szerinti rendezése</title>
	<para>Például: https://github.com/nbatfai/future/blob/master/cs/F9F2/fenykard.cpp#L180</para>
	<para>forráskód:<link xlink:href="https://github.com/ghjbku/prog2/tree/master/godel/">github link</link> </para>
    <programlisting language="c++"><![CDATA[#include <iostream>
#include <map>

 int main(void){
 srand(time(NULL));
 std::map<char, int> map;
 std::map<int, char> sortedMap;


 for(char c = 'a'; c <= 'd'; c++){
map.insert({c,(rand()% 100 + 0)});
 }


 std::cout << "unsorted numbers: " << std::endl;
 for(auto const numb: map){
 std::cout << numb.first << ": " << numb.second << std::endl;
sortedMap[numb.second] = numb.first;
 }

 std::cout <<std::endl <<"Sorted numbers: " << std::endl;
 for(auto const numb: sortedMap)
 std::cout << numb.second << ": " << numb.first << std::endl;


 return 0;
}]]></programlisting>
<para>
a map-ek használatához szükségünk van a map library-ra,ezek olyan tárolók, melyeknek van egy azonosítója(egy kulcs) és van egy értéke.
Két map rekordnak az azonosítója soha nem egyezik/egyezhet meg. 
</para>
<programlisting language="c++"><![CDATA[int main(void){
 srand(time(NULL));
 std::map<char, int> map;
 std::map<int, char> sortedMap;
]]></programlisting>
<para>Először létrehozunk két map-et, az egyik tárolja majd a rendezetlen, a másik a rendezett számokat.
az <command>std::map</command> "paraméterei" a következők: az első, kacsacsőr utáni paraméter a kulcs érték típusa, a második param. pedig a map érték.
Így tehát az unsorted-map kulcsértéke char típusú lesz, és számokat tárol, a sortedMap kulcsértéke viszont már szám típusú, és karaktereket tárol.
</para>
<programlisting language="c++"><![CDATA[for(char c = 'a'; c <= 'd'; c++){
map.insert({c,(rand()% 100 + 0)});
 }]]></programlisting><para>A deklarálás után feltöltjük az unsorted mapunkat.
 Ehhez egy for-ciklus lesz segítségünkre.</para>
 <para>A ciklus a-tól d-ig fog menni, és minden tick-ben insertel egy adatpárt a map-ba.
 A map.instert szintaktikája a következő:</para>
 <para><command>map_név.insert({kulcs,map_érték});</command></para>
 <para>A mapunk értékét randomizált 100-ig terjedő számokkal töltjük meg, a kulcs pedig a ciklus-változó értéke lesz.
 </para>

<programlisting language="c++"><![CDATA[std::cout << "unsorted numbers: " << std::endl;
 for(auto const numb: map){
 std::cout << numb.first << ": " << numb.second << std::endl;
sortedMap[numb.second] = numb.first;
 }]]></programlisting>
 <para>Harmadik lépésként kiíratjuk az unsorted-map értékpárosait, ezt is for-ciklus segítségével.
 Észrevehetjük, hogy a for-ciklus szintaxisa nem éppen az előzőhöz hasonló.
 Ezt a for ciklust range-based for-nak hívják.
 ennek a szintaktikája a következő:</para>
 <para><command>for(típus1 változó: vektor/map/array/etc. )</command></para><para>Fontos tudni viszont,
 hogy a változónak azonos típusúnak kell lennie a map-ban levő érték típusával.
 Mivel a mi esetünkben auto típust adtunk meg, ezért a típusmegválasztást a compiler-re hagyjuk, az pedig a map értékeit figyelembe véve választ majd típust.
 </para>

<programlisting language="c++"><![CDATA[std::cout <<std::endl <<"Sorted numbers: " << std::endl;
 for(auto const numb: sortedMap)
 std::cout << numb.second << ": " << numb.first << std::endl;
]]></programlisting><para>Végül kiíratásra kerül a sortedMap tartalma, amely az előbbi ciklushoz hasonlóan zajlik.
</para>
    <figure>
            <title>
                Az
                <type>stl</type>
                futás
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="godel/stl.png" scale="250" />
                </imageobject>
                <textobject>
                    <phrase>
                        Az
                        <type>stl</type>
                        futás
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>

    </section>

<!-- 	<section>
	<title>Alternatív Tabella rendezése</title>
	<para>Mutassuk be a https://progpater.blog.hu/2011/03/11/alternativ_tabella<![CDATA[ a programban a java.lang
Interface Comparable<T> szerepét!]]></para>
</section>

	<section>
	<title>Prolog családfa</title>
	<para>Ágyazd be a Prolog családfa programot C++ vagy Java programba! Lásd para_prog_guide.pdf!</para>
	</section>-->

	<section>
	<title>GIMP Scheme hack</title>
	<para>Ha az előző félévben nem dolgoztad fel a témát (például a mandalás vagy a króm szöveges
dobozosat) akkor itt az alkalom!</para>
	<para>
            Írj olyan script-fu kiterjesztést a GIMP programhoz, amely név-mandalát készít a
            bemenő szövegből!               
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv">https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv</link>      
        </para>
        <para><command>A forráskód Bátfai Norbert tulajdonában áll.</command>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/GIMP_Lisp/Mandala">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/GIMP_Lisp/Mandala</link>               
        </para>
<para>
            
            Tanulságok, tapasztalatok, magyarázat...
            A megszokott-tól eltérően a nyelvben nem infix alakban adjuk meg a műveleteket, hanem prefix alakban.

        </para> 
        <programlisting><![CDATA[(define (elem x lista)

    (if (= x 1) (car lista) (elem (- x 1) ( cdr lista ) ) )

)]]></programlisting> 
<para>Mint láthatjuk, itt a define kulcsszóval lehet függvényeket inicializálni.
Ez a függvény az "elem" névre hallgat, és 2 paramétert kér be, az "x"-et és a "lista"-át.
Ha az x=1, akkor a (car lista) parancs hajtódik végre, ha nem, akkor pedig az (elem (x-1) (cdr lista)) parancs.
Ez miatt a sor miatt a függvény rekurzív lesz, hiszen addig hajta végre az "else" ágat, amíg az x!=1.
A car és cdr függvények a lista elején ill. végén lévő elemet adják vissza.
</para>
<programlisting><![CDATA[(define (text-width text font fontsize)
(let*
    (
        (text-width 1)
    )
    (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    

    text-width
    )
)]]></programlisting>  
<para>
Ez a függvény a szöveg szélességét kezeli.
paraméterként bekéri a szöveget, a betűtípust és a betűméretet.
A függvény törzsében a megadott paraméterekkel a gimp beállítja a szöveg kinézetét.
</para>  
<programlisting><![CDATA[(define (script-fu-bhax-mandala text text2 font fontsize width height color gradient)
(let*
    (]]></programlisting>
    <para>Ezen kezdetű függvény tekinthető a main fügvénynek, hiszen itt alkalmazzuk az előbb megadott függvényeket, itt 
    írjuk a program érdemi részét.
     </para>      
     <programlisting><![CDATA[(gimp-image-insert-layer image layer 0 0)

    (gimp-context-set-foreground '(0 255 0))
    (gimp-drawable-fill layer FILL-FOREGROUND)
    (gimp-image-undo-disable image) ]]></programlisting>
    <para>
    Az első sor beilleszt egy layert, a második sor beállítja annak háttérszínét zöldre, a harmadik sor kitölti a hátteret, az utolsó
    sor pedig újra aktiválja a képet.
    </para>

	</section>
</chapter>
