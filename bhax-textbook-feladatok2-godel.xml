<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gödel!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
	
	<section>
<title>gengszterek</title>
        <para>Gengszterek rendezése lambdával a Robotautó Világbajnokságban
https://youtu.be/DL6iQwPx1Yw (8:05-től)</para>
	</section>

	<section>
	<title>C++11 Custom Allocator</title>
	<para>https://prezi.com/jvvbytkwgsxj/high-level-programming-languages-2-c11-allocators/ a
CustomAlloc-os példa, lásd C forrást az UDPROG repóban!</para>
	<para>forráskód:<link xlink:href="https://github.com/ghjbku/prog2/tree/master/godel/">github link</link> </para>
<programlisting language="c++"><![CDATA[class TrackingAllocator
{
.
.
.

pointer allocate(size_type numObjects)
    {
        mAllocations += numObjects;
        return static_cast<pointer>(operator new(sizeof(T) * numObjects));
    }

    void deallocate(pointer p, size_type numObjects)
    {
        operator delete(p);
    }

]]></programlisting>
<para>A programkód legfontosabb részletei az allokációért felelős <command>allocate</command> és a deallokációért felelős <command>deallocate</command> függvények.
Ezek a TrackingAllocator osztályban foglalnak helyet.</para>
	</section>

	<section>
	<title>STL map érték szerinti rendezése</title>
	<para>Például: https://github.com/nbatfai/future/blob/master/cs/F9F2/fenykard.cpp#L180</para>
	</section>

	<section>
	<title>Alternatív Tabella rendezése</title>
	<para>Mutassuk be a https://progpater.blog.hu/2011/03/11/alternativ_tabella<![CDATA[ a programban a java.lang
Interface Comparable<T> szerepét!]]></para>
	</section>

	<section>
	<title>Prolog családfa</title>
	<para>Ágyazd be a Prolog családfa programot C++ vagy Java programba! Lásd para_prog_guide.pdf!</para>
	</section>

	<section>
	<title>GIMP Scheme hack</title>
	<para>Ha az előző félévben nem dolgoztad fel a témát (például a mandalás vagy a króm szöveges
dobozosat) akkor itt az alkalom!</para>
	<para>
            Írj olyan script-fu kiterjesztést a GIMP programhoz, amely név-mandalát készít a
            bemenő szövegből!               
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv">https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv</link>      
        </para>
        <para><command>A forráskód Bátfai Norbert tulajdonában áll.</command>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/GIMP_Lisp/Mandala">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/GIMP_Lisp/Mandala</link>               
        </para>
<para>
            
            Tanulságok, tapasztalatok, magyarázat...
            A megszokott-tól eltérően a nyelvben nem infix alakban adjuk meg a műveleteket, hanem prefix alakban.

        </para> 
        <programlisting><![CDATA[(define (elem x lista)

    (if (= x 1) (car lista) (elem (- x 1) ( cdr lista ) ) )

)]]></programlisting> 
<para>Mint láthatjuk, itt a define kulcsszóval lehet függvényeket inicializálni.
Ez a függvény az "elem" névre hallgat, és 2 paramétert kér be, az "x"-et és a "lista"-át.
Ha az x=1, akkor a (car lista) parancs hajtódik végre, ha nem, akkor pedig az (elem (x-1) (cdr lista)) parancs.
Ez miatt a sor miatt a függvény rekurzív lesz, hiszen addig hajta végre az "else" ágat, amíg az x!=1.

</para>
<programlisting><![CDATA[(define (text-width text font fontsize)
(let*
    (
        (text-width 1)
    )
    (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    

    text-width
    )
)]]></programlisting>  
<para>
Ez a függvény a szöveg szélességét kezeli.
paraméterként bekéri a szöveget, a betűtípust és a betűméretet.
A függvény törzsében a megadott paraméterekkel a gimp beállítja a szöveg kinézetét.
</para>  
<programlisting><![CDATA[(define (script-fu-bhax-mandala text text2 font fontsize width height color gradient)
(let*
    (]]></programlisting>
    <para>Ezen kezdetű függvény tekinthető a main fügvénynek, hiszen itt alkalmazzuk az előbb megadott függvényeket, itt 
    írjuk a program érdemi részét.
     </para>      
     <programlisting><![CDATA[(gimp-image-insert-layer image layer 0 0)

    (gimp-context-set-foreground '(0 255 0))
    (gimp-drawable-fill layer FILL-FOREGROUND)
    (gimp-image-undo-disable image) ]]></programlisting>
    <para>
    Az első sor beilleszt egy layert, a második sor beállítja annak háttérszínét zöldre, a harmadik sor kitölti a hátteret, az utolsó
    sor pedig újra aktiválja a képet.
    </para>

	</section>
</chapter>
