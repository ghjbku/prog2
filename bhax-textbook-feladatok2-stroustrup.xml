<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Stroustrup!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>JDK osztályok</title>
        <para>

            Írjunk olyan Boost C++ programot (indulj ki például a fénykardból) amely kilistázza a JDK összes
            osztályát (miután kicsomagoltuk az src.zip állományt, arra ráengedve)!
        </para>
        <para>
            A programkód forrása (
            <command>Nem saját source</command>
            ):
            <link xlink:href="https://github.com/ghjbku/prog2/tree/master/stroustrup">github link</link>
        </para>
        <figure>
            <title>
                A
                <type>jdk</type>
                futás
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="stroustrup/jdk.png" scale="250" />
                </imageobject>
                <textobject>
                    <phrase>
                        A
                        <type>jdk</type>
                        futás
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>A program három függvényből áll, a GetCurrentWorkingDir,readClasses és searchRootFolders függvényekből.
        Nézzük először a <command>GetCurrentWorkingDir</command> funkciót:</para>
        <programlisting language="c++"><![CDATA[
string GetCurrentWorkingDir( void )
{
char buff[FILENAME_MAX];
GetCurrentDir( buff, FILENAME_MAX );
string current_working_dir(buff);
return current_working_dir;
}]]></programlisting>
<para>A függvényünk nem kér be paraméternek semmit, a GetCurrentDir beépített függvényt használja(getcwd)
,hogy az aktuális könyvtár nevét bekérje, majd létrehoz egy string típusú <command>current_working_dir</command>
 változót, melyben eltároljuk a buffer-ben található fájlnevet, melyet végül visszaad a függvény.</para>
   <para>Következő funkció egy visszatérési érték nélküli funkció/metódus lesz, a <command>readClasses:</command></para>
   <programlisting language="c++"><![CDATA[
void readClasses ( boost::filesystem::path path, vector<string>& classes)
{
if ( is_regular_file ( path ) ) {
std::string ext ( ".java" );
if ( !ext.compare ( boost::filesystem::extension ( path ) ) ){
classes.push_back(path.string());
}
} else if ( is_directory ( path ) )
for ( boost::filesystem::directory_entry & entry : boost::filesystem::directory_iterator ( path ) )

readClasses ( entry.path(),classes);
}]]></programlisting>
   <para>A függvény paraméterként egy path típusú path változót és egy string-vector objektumot vár.
   Ha az is_regular_file függvény igaz értéket ad vissza, akkor megadjuk a keresni kívánt fájl-kiterjesztést az ext objektumban,
   ami most a ".java"</para>
   <para>A Következő if elágazásban megnézzük, hogy az ext objektumunk értéke megegyezik-e a path-ban található kiterjesztéssel.
   Ha nem,akkor push_back, tehát a classes vektor végéhez adja a path-et.
   </para>
   <para>Else if ágba lépünk, ha az <command>is_regular_file</command> nem volt igaz, ekkor 
   az <command>is_directory</command> függvényt hívjuk meg ellenőrzésre.
   Ha a path egy könyvtár, akkor meghívunk egy for ciklust, melyben az entry.path() elérési utakat behelyezzük a classes vektorunkba.
   A ciklus addig megy, amíg van entry.</para>
   <para>Utolsó függvény pedig a <command>searchRootFolders</command>:</para>
   <programlisting language="c++"><![CDATA[
   vector<string> searchRootFolders (vector<string> folders)
{
vector <string> classes;
for ( const auto & path : folders)
{
boost::filesystem::path root ( path );
readClasses ( root, classes);
}
return classes;
}]]></programlisting>
<para>Láthatjuk, hogy ez a függvény már használja a readClasses függvényt,amit az előbb néztünk át,
itt a path a root objektum lesz, a class pedig marad a régi.
visszatérési érték a classes objektum lesz.</para>
<para>Végül jöhet a main függvény:</para>
<programlisting language="c++"><![CDATA[
int main(int argc, char const *argv[])
{
vector<string> roots = {
GetCurrentWorkingDir()+"/"+"src"
};

vector<string> classes = searchRootFolders ( roots );
cout<<endl<<"-----------------Printing java classes------------------------"<<endl;
for(auto &i : classes)
{
cout << i << endl;
}
cout << "összesen " << classes.size() << " osztály található\n";
return 0;
}]]></programlisting><para>A classes vektorunk értékéül a searchRootFolders függvény visszatérési értékét adjuk, ami ugyancsak a classes objektum volt.
Ezután egy for ciklusban kiíratjuk a classes-ben található elérési utakat, végül a classes.size()-al megnézzük, hogy mennyi osztályt talált a program.</para>
    </section>

    <section>
        <title>Másoló-mozgató szemantika</title>
        <para>

            Kódcsipeteken (copy és move ctor és assign) keresztül vesd össze a C++11 másoló és a mozgató
            szemantikáját, a mozgató konstruktort alapozd a mozgató értékadásra!

        </para>
        <programlisting language="c++"><![CDATA[LZWBinFa (LZWBinFa&& regi){
            std::cout<< "LZWBinFa movetor" << std::endl;
            
            *this = std:move(regi);]]></programlisting>
            <para>Itt látható az std::move funkció,
             amely egy jobbérték referenciát ad vissza, ezzel "mozgatva" az objektumot.
            </para>
<programlisting language="c++"><![CDATA[LZWBinFa (const LZWBinFa& regi)
{
std::cout << "LZWBinFa copytor" << std::endl;

gyoker.ujEgyesGyerek (masol (regi.gyoker.egyesGyerek (), regi.fa));
gyoker.ujNullasGyerek (masol (regi.gyoker.nullasGyerek (), regi.fa));

if (regi.fa == & (regi.gyoker)){fa = &gyoker;}
}

}]]></programlisting><para>Ez a másoló konstruktor,mely lemásolja a regi.fa-ban található nullás és egyes gyermekek-et,
és az új fa-ba másolja azokat.</para>
    
    <programlisting language="c++"><![CDATA[LZWBinFa (const LZWBinFa& regi)
{
std::cout << "LZWBinFa masolo ertekadas" << std::endl;

szabadit (gyoker.egyesGyerek());
szabadit (gyoker.nullasGyerek());

gyoker.ujEgyesGyerek (masol (regi.gyoker.egyesGyerek (), regi.fa));
gyoker.ujNullasGyerek (masol (regi.gyoker.nullasGyerek (), regi.fa));

if (regi.fa == & (regi.gyoker)){fa = &gyoker;}
}

}]]></programlisting><para>EZ pedig a másoló értékadás, amely nagyban hasonlít a konstruktoros megoldásra,
csak annyi a különbség,hogy a másolás előtt felszabadítja az egyes- és nullásgyermek-et, Null-ra állítja értéküket.
</para>

<programlisting language="c++"><![CDATA[LZWBinFa (LZWBinFa&& regi)
{
            std::cout<< "LZWBinFa movetor" << std::endl;
            
            gyoker.ujEgyesGyerek (regi.gyoker.egyesGyerek());
            gyoker.ujNullasGyerek (regi.gyoker.nullasGyerek());
            
            regi.gyoker.ujEgyesGyerek(nullptr);
            regi.gyoker.ujNullasGyerek(nullptr);
}]]></programlisting><para>Különbség az eredeti "movetor"-hoz képest, hogy itt nem egy jobbérték referenciát ad vissza egy move függvény,
helyette az új fa gyokerének az új Egyes és Nullás gyermekei-t a régi gyökér nullás és egyes gyermekeire állítjuk be, majd a regi fa gyökerének gyermekeit beállítjuk, hogy nullpointerre mutassanak.
</para>


</section>


    <section>    <title>Hibásan implementált RSA törése</title>
    <para>

        Készítsünk betű gyakoriság alapú törést egy hibásan implementált RSA kódoló:
        https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_3.pdf (71-73 fólia) által
        készített titkos szövegen.
    </para>
    <para>A forráskód itt található:<link xlink:href="https://github.com/ghjbku/prog2/tree/master/stroustrup">github link</link>
        </para><para>Az encrypt függvény:</para>
        <programlisting language="java"><![CDATA[
public BigInteger[] encript(String msg) {
byte[] buffer = msg.getBytes();
java.math.BigInteger[] priv = new java.math.BigInteger[buffer.length];
for (int i = 0 ; i < priv.length ; i++) {
priv[i] = new java.math.BigInteger(new byte[] {buffer[i]});
priv[i] = priv[i].modPow(this.e, this.n);
}
return priv;]]></programlisting><para>A BigInteger[] egy BigInteger tömb, ez a típus a java.math.BigInteger importálásával érhető el.
</para>
<programlisting language="java"><![CDATA[byte[] buffer = msg.getBytes();]]></programlisting><para>
Ez a sor létrehoz egy byte tömböt, amely a buffer névre hallgat.
Ez a buffer értékül kapja a <command>msg</command> string byte-sorozattá alakított változatát.
A sorozattá alakítás a platform alapértelmezett charset-ével történik.</para><para>
A következő sorban egy priv változót hozunk létre, amely szintén BigInteger tömb típusú lesz.
Ezután egy for ciklust indítunk, ami a priv változó összes elemén végigmegy, először az i-edik elemét egyenlővé teszi
egy új BigInteger-el, majd egy modulus exponenciális függvényt végez el azokon.
A <command>this.e</command> jelenti az exponenciális számot, míg a <command>this.n</command> a modulus-t. 
A pow-al szemben a modpow képes elvégezni a számítást akkor is, ha az exp negatív szám.
</para>
      
        <programlisting language="java"><![CDATA[
        public String atlagDecrypt(String clean ,BigInteger[] msg , Map<Character,Integer> m) {
byte[] buffer = clean.getBytes();
for (int i = 0 ; i < msg.length ; i++) {
msg[i] = msg[i].modPow(this.d, this.n);
buffer[i] = msg[i].byteValue();
}
.
.
.
.
.]]></programlisting><para>Ez pedig az átlag szerinti szöveg-törés függvénye.
Mint az encrypt-ben, itt is lesz egy buffer változónk, amely a clean változó byte-sorozattá alakított változatát tárolja.
A for ciklusban a msg tömb elemein megyünk végig, először megint a modpow függvény segítségét hívjuk, majd 
a buffer-en is végigmegyünk, és a buffer i-edik elemének értékéül a msg i-edik elemének a byte-szerinti értékét adjuk.(mivel ugye a msg egy szám típusú tömb,
annak vesszük a modulusát, hatványozását, attól még szám lesz, és ezt a számot konvertáljuk át byte formára.)</para>
        <programlisting language="java"><![CDATA[
        for (int i = 0 ; i < wrong_dm.length() ; i++) {
Character c;
if ( ( (c = contains(currentMap.get(wrong_dm.charAt(i)),m )) != null )) {
wrong_dm =wrong_dm.replace(wrong_dm.charAt(i), c);
currentMap.remove(wrong_dm.charAt(i));
}
        ]]></programlisting><para>Itt látható a karakterek kicserélése a map-ban látott gyakoriságot követve, és ezzel létrejön a "tiszta, lefordított szöveg".
        </para>
         <figure>
            <title>
                Az
                <type>rsa</type>
                futás
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="stroustrup/rsa2.png" scale="250" />
                </imageobject>
                <textobject>
                    <phrase>
                        Az
                        <type>rsa</type>
                        futás
                    </phrase>
                </textobject>
            </mediaobject>
        </figure><para>Látható, hogy a program egyfajta bruteforce metódusként üzemel azzal, hogy az RSA kódolás
        betűk helyett szavanként történt meg, ezért a betű előfordulási arány segítségével készíthető olyan program, amely az eredeti szöveg egy részét képes "lefordítani".
        Sajnos ez nem teljesen lehetséges, hiszen ha a betűk aránya a szövegben nem egyezik meg az online található statisztikával, akkor az betű-elcsúszásokhoz vezet, emiatt szinte lehetetlen a teljes decriptálás.
        </para><figure>
            <title>
                Az
                <type>rsa</type>
                futás
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="stroustrup/rsa.png" scale="250" />
                </imageobject>
                <textobject>
                    <phrase>
                        Az
                        <type>rsa</type>
                        futás
                    </phrase>
                </textobject>
            </mediaobject>
        </figure><para>
        Látható viszont a felső képnél, hogy ha minden betűt sikeresen eltalál, onnan már egész egyszerű kitalálnunk az eredeti szót.
        Ha nem sikerült volna megfejteni a szót, amire gondoltam, a szó: <command>valami</command></para>
        <figure>
            <title>
                Az
                <type>rsa</type>
                futás
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="stroustrup/rsa3.png" scale="250" />
                </imageobject>
                <textobject>
                    <phrase>
                        Az
                        <type>rsa</type>
                        futás
                    </phrase>
                </textobject>
            </mediaobject>
        </figure><para>Ezen a képen látható, hogy az utolsó két sor szinte pofon-egyszerűen kitalálható a törést követően, na persze nem 100%-os a törés, de egy pár futás után össze lehet illeszteni a szöveget.</para>
</section>

 
</chapter>
