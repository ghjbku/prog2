<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Arroway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>OO szemlélet</title>
        <para>A módosított polártranszformációs normális generátor beprogramozása Java nyelven.
Mutassunk rá, hogy a mi természetes saját megoldásunk és az OpenJDK, Oracle JDK-ban a Sun által adott OO szervezés ua.!
<link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_5.pdf">Prog1_5.pdf</link>               
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/ghjbku/prog2/tree/master/OO_szemlelet">github link</link> </para>
        <para>
            </para>
            <figure>
            <title>A <type> JDK</type> kód</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="OO_szemlelet/gauss.png" scale="200" />
                </imageobject>
                <textobject>
                    <phrase>A <type> JDK</type> kód</phrase>
                </textobject>
            </mediaobject>
        </figure> 
        <para>Amint láthatjuk, a változók elnevezésén kívül és <command>StrictMath,nextDouble</command> metódusokon kívül az általunk írt kód megegyezik.
        Mi ugyanis StrictMath helyett a Math metódust használtuk a gyökvonás és logaritmus képzésnél.</para>
        <programlisting language="java"><![CDATA[double r=Math.sqrt((-2*Math.log(c))/c);]]></programlisting>   
    <para>A fő eltérés a két metódus között(azon kívül, hogy a StrictMath-ban hiperbolikus és egyéb függvények is elérhetőek) az, hogy a <command>StrictMath</command>-nál ha meghívunk egy függvényt, annak ugyan azt az értéket kell visszaadnia például x86-os lebegőpontos változónál, mint SPARC lebegőpontos-nál.
    Ezzel szemben a Math megengedi, hogy a pontosságért cserébe gyorsabban leforduljon a programunk.(na persze a pontossági eltérés nem számottevő a jelen programunk megírásánál)</para>
    <programlisting language="java"><![CDATA[public class polargenerator
{]]></programlisting><para>Amint láthatjuk, az egész programkód egy osztályba van elhelyezve, ez a Java-nak egy sajátossága.</para>
   <programlisting language="java"><![CDATA[ boolean nincstar=true;
 double tarolt;]]></programlisting><para>A forráskód elején inicializálunk két változót, a <command>nincstar</command> változó egy logikai változó, amely megmondja, hogy van-e eltárolva adat.
 Ezzel szemben a <command>tarolt</command> változó hordozza majd a tárolni kívánt értéket.</para>
<programlisting language="java"><![CDATA[ public double kovetkezo()
	{
	if(nincstar)
		{
		double a1,a2,b1,b2,c; ]]></programlisting><para>Itt pedig egy kovetkezo nevű metódust hozunk létre, ha a nincstar értéke igaz, akkor végrehajtódik az if-ben leírt változók deklarálása.
        </para>
        <programlisting language="java"><![CDATA[do{
		  a1=Math.random();
		  a2=Math.random();
		  b1=2*a1-1;
		  b2=2*a2-1;
		  c=b1 * b1 + b2 * b2;
		          }while(c>1);]]></programlisting><para>Ez a következő pár sor egy hátultesztelős ciklus.
                         Először az a1,a2 változók értékét randomizáljuk, majd a b1,b2 változókban az előbbi két értéket
                         megduplázzuk és csökkentjük az értéket 1-el.
                         a c változó értékét a b1 és b2 változók négyzetével tesszük egyenlővé. Ez addig fut, amíg a c értéke nagyobb lesz, mint 1.
                          </para>
        <programlisting language="java"><![CDATA[double r=Math.sqrt((-2*Math.log(c))/c);
		tarolt=r*b2;
		nincstar=!nincstar;
		return r*b1;
        ]]></programlisting><para>ezekben a sorokban létrehozunk egy r változót, és annak az értékéül a <![CDATA[Math.sqrt((-2*Math.log(c))/c)]]> függvény eredményét adjuk.
        a tárolandó érték az r változó és a b2 változó szorzata lesz, az értékadás után pedig a nincstar értékét negáljuk.
        végül visszatérési értékként a r és a b1 szorzatát adjuk meg.
        </para>
        <programlisting language="java"><![CDATA[else
		{
		nincstar=!nincstar;
		return tarolt;		
		}
	]]></programlisting><para>Az else ágban csak annyi a dolgunk, hogy a nincstar értékét negáljuk, és a tárolt értéket adjuk meg visszatérési értékként.
    Végezetül pedig kiíratjuk a main-ben.</para>
     <programlisting language="java"><![CDATA[public static void main(String[] args)
	{polargenerator g = new polargenerator();
	for(int i=0; i<10;++i)
		{
		System.out.println(g.kovetkezo());
		}
	}]]></programlisting>
    </section>        

<section>
        <title>"Gagyi"</title>
        <para>
Az ismert formális <command><![CDATA[while(x <=t && x>=t && t!=x);]]></command> tesztkérdéstípusra adj a szokásosnál "mélyebb" választ, írj Java példaprogramot mely egyszer végtelen ciklus, más x és t értékekkel pedig nem!
A példát építsd a JDK Integer.java forrására, hogy a 128-nál inkluzív objektum példányokat poolozza! 
<link xlink:href="https://www.facebook.com/groups/udprog/permalink/437825193072042/">facebook post</link>
	</para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/ghjbku/prog2/tree/master/gagyi">github link</link>
                       
        </para>
    
        <para>
    <![CDATA[while (x <= t && x >= t && t != x);]]>        
        </para>
        <para>Amint láthatjuk, az első két tagja a ciklus feltételeknek a két változó értékét hasonlítja össze
        . A harmadik viszont (<command>t!=x</command>) a változók referenciáját, ami az integer-cache miatt -128 és 127 között ugyanaz lesz.
        A gagyi.java fájl ezért végtelen ciklust képez, hiszen a -129 már nincs benne a cache-ben, ezért 
        a t!=x mindíg igaz lesz.
        a gagyi2.java viszont a -128 értékkel dolgozik, ami benne van a cache-ben, tehát a ciklus nem jön létre.
        </para>
        <para>Érdekesség még, hogy a Java6 óta bevezették a felső érték bindelését, amely a 
        </para><para><command>java.lang.Integer.IntegerCache.high</command>
         segítségével a programozó által is állítható lett.
         Fontos tudni viszont, hogy a maximális érték legalább 127 kell, hogy legyen.
         Ha az érték kevesebb, akkor egy AssertionError hibakódot kapunk.</para>
         <figure>
            <title>A <type> gagyi</type> futás</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="gagyi/gagyirun.png" scale="200" />
                </imageobject>
                <textobject>
                    <phrase>A <type> gagyi</type> futás</phrase>
                </textobject>
            </mediaobject>
        </figure> 
    </section>   

    <section>
        <title>Yoda</title>
        <para>
Írjunk olyan Java programot, ami java.lang.NullPointerEx-el leáll, ha nem követjük a Yoda conditions-t!           
<link xlink:href="https://en.wikipedia.org/wiki/Yoda_conditions">yoda wiki</link>
	</para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/ghjbku/prog2/tree/master/yoda">github link</link>              
        </para>
        <programlisting language="java"><![CDATA[public class yoda
{
	String i;
   public yoda()
   {
   i=null;
		
   }
   public static void main(String[] args)
	{
	yoda f=new yoda();
	
	if("5".equals(f.i))//if(f.i.equals("5"))
	{
	System.out.println("t");
	}
	else
	{
	System.out.println("f");
	}
   }
}]]></programlisting>
 <para>
           A fenti programkód a yoda kondíciós megoldást mutatja, ami annyit tesz, hogy a konstanst rakjuk 
           a ciklusmagban az első helyre, amelyel a NullPointer kivételeket elkerülhetjük.
            A program maga annyit tesz, hogy összehasonlítja a konstans számot a yoda típusú f objektumunk i tagváltozójával.
            a <command>yoda f=new yoda();</command> sor példányosítja a yoda osztályt.
       Ha a két érték megegyezik, akkor kiír az alapértelmezett output-ra egy t betűt, egyébként pedig egy f betűt.
       A yoda kondíció nélkül egyik sem történik meg, hiszen az i értéke <command>null</command>, tehát azt várnánk, hogy NullPointerEx hibakódot látunk viszont.
           A kikommentelt részt beillesztve pedig a program lefutásánál meg is kapjuk a nullpointer exception-t.
        A kondíciót alkalmazva ugyebár egy f betű kerül ki a standard outputra. 
       
        </para>
        <figure>
            <title>A <type> yoda</type> futás</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="yoda/unknown.png" scale="200" />
                </imageobject>
                <textobject>
                    <phrase>A <type> yoda</type> futás</phrase>
                </textobject>
            </mediaobject>
        </figure> 

    </section>        
<section>
        <title>Kódolás from scratch</title>
        <para>
Induljunk ki ebből a tudományos közleményből:<link xlink:href="http://crd-legacy.lbl.gov/~dhbailey/dhbpapers/bbp-alg.pdf">http://crd-legacy.lbl.gov/~dhbailey/dhbpapers/bbp-alg.pdf</link>
és csak ezt tanulmányozva írjuk meg Java nyelven a BBP algoritmus megvalósítását!
Ha megakadsz, de csak végső esetben:<link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#pi_jegyei">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#pi_jegyei</link>

	</para>
         <para>
            Megoldás forrása:<link xlink:href="https://github.com/ghjbku/prog2/tree/master/pibbp">github link</link>              
        </para>
         <figure>
            <title>A <type> piBBP</type> futás</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="pibbp/pibbp.png" scale="200" />
                </imageobject>
                <textobject>
                    <phrase>A <type> piBBP</type> futás</phrase>
                </textobject>
            </mediaobject>
        </figure> 
        <para>
            a <command>public PiBBP(int d) </command> rész a d+1 hexadecimális jegytől számítja ki a jegyeket
        , azon belűl a 16^d pi képlet kiszámítása.
        A <command> public double d16Sj(int d, int j)</command> eljárás a {16^d Sj} részlet kiszámítását végzi.
        <command> public long n16modk(int n, int k)</command> végzi a hatványozás modulóját, itt n a kitevő, k a modulus.
        </para>
        <programlisting language="java"><![CDATA[public String toString() {
        
        return d16PiHexaJegyek;
    }]]></programlisting><para>ez az eljárás a kiszámolt hexadecimális értékeket konvertálja át stringbe, majd visszaadja az értéket.
    </para>
    </section>       

</chapter>                
