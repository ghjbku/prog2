<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, !</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
   <title>FUTURE tevékenység editor</title> <para>
Javítsunk valamit a ActivityEditor.java JavaFX programon!
https://github.com/nbatfai/future/tree/master/cs/F6
Itt láthatjuk működésben az alapot: https://www.twitch.tv/videos/222879467</para>

<figure>
            <title>
                Az
                <type>editor</type>
                futás
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="future/f6.png" scale="200" />
                </imageobject>
                <textobject>
                    <phrase>
                        Az
                        <type>editor</type>
                        futás
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>látható, hogy a tevékenység-fa-ba kattintás hatására a "tevékenységekhez hozzárendelt tulajdonságok" szöveg eltűnik, ez a szöveg az <command>actPropsLabel</command> objektumban található.
        Ezen bug kiküszöbölhető, ha az else ágból kivesszük a actPropsLabel.setText(""); sort, így csak akkor tűnik el a szöveg, ha egy tevékenységre rákattintunk.
        Viszont a szerekesztés után még ekkor sem jelenik meg újra az alapértelmezett szöveg, helyette üres marad a label.
        A szöveget visszahozhatjuk, ha az onclicked event-ben az item!=null elágazás után beillesszük ezt a pár sort:</para>
        <programlisting language="java"><![CDATA[class FileTree extends javafx.scene.control.TreeView<java.io.File> {
        static final String actlab="A tevékenységekhez hozzárendelt tulajdonságok";
        .
        .
        .
/*ez az if(item!=null) utolsó ága*/} else {

                    save(propsEdit, actPropsLabel);
                    propsEdit.setText("");
                    
                }

        if(item==root){
                    save(propsEdit, actPropsLabel);
            actPropsLabel.setText(actlab);
                }]]></programlisting>
                <para>Ez azt fogja tenni, hogy ha rákattintunk a City-re, ami a gyökérkönyvtár,akkor elmenti a propsEdit-ben található szöveget, majd
                az actPropsLabel szövegét újra beállítja az alapértelmezettre, ezt a szöveget az actlab változóban tároljuk el.</para>
        
        <figure>
            <title>
                Az
                <type>editor javitott</type>
                futása
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="future/f6jav.png" scale="200" />
                </imageobject>
                <textobject>
                    <phrase>
                        Az
                        <type>editor javitott</type>
                        futása
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
        
        <para>Sajnos a java 8.1-től nem található meg a java-ban a JavaFX, ezért ezt külön telepítenünk kell,
        A program lefordításához szükségünk van az openjfx 8.u202-3 verziójára(minimum):</para>
        <figure>
            <title>
                A
                <type>javafx</type>
                
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="future/fx.png" scale="200" />
                </imageobject>
                <textobject>
                    <phrase>
                        A
                        <type>javafx</type>
                        
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>kód snippetek a változtatásról:</para>
        <programlisting language="java"><![CDATA[import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.control.TextField;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
.
.
.
//410-dik sor
public class ActivityEditor extends javafx.application.Application {
]]></programlisting>
<para>a paint.Color osztályt azért importáltuk, mivel használni fogjuk a Color.GREENYELLOW parancsot, na persze bármely színt használhatjuk, miután a class importálva lett.
a paint.Paint osztály felel a háttér "befestéséért", de más ábrák, szövegdobozok és egyéb színezéséért is felelős.Kódunkban a fill objektum (alúl) egy Paint típusú változó. 
A TextField-et használjuk a szövegmezők megjelenítéséhez,a " tevékenységekhez hozzárendelt tulajdonságok" label alatti rész egy ilyen textfield.
A Background és BackgroundFill class-ok a háttér-ért felelősek.
A BackgroundFill teszi lehetővé a háttér színezését, egyedül a Paint nem elegendő.
A 410-edik sor-tól kezdődik az editor megjelenítésének "leírása".</para>
<programlisting language="java"><![CDATA[private static Paint fill;
.
.
.
public void start(javafx.stage.Stage stage) {
    .
    .
    .
  javafx.scene.layout.VBox box = new javafx.scene.layout.VBox();
        box.setBackground(new Background(new BackgroundFill(null,null,null)));
       
        String style = "-fx-background-color: rgba(255, 255, 0, 5);";
        
        final javafx.scene.Scene scene = new javafx.scene.Scene(box,800,400,Color.GREENYELLOW);
.
.
.
javafx.scene.control.TreeView<String> stringTree = new StringTree(properties, true, propsEdit);
        stringTree.setEditable(false);
        stringTree.setBackground(new Background(new BackgroundFill(fill, null,null)));
        
.
.
.

        box.getChildren().add(new javafx.scene.control.Label("Tulajdonságok fája"));

        box.getChildren().add(stringTree);
        box.getChildren().add(new javafx.scene.control.Label("Tevékenységek fája és a tevékenységekhez hozzárendelt tulajdonságok"));
        box.getChildren().add(fileTree);
        box.setStyle(style);]]></programlisting>
        <programlisting language="java"><![CDATA[javafx.scene.layout.VBox box = new javafx.scene.layout.VBox();
         box.setBackground(new Background(new BackgroundFill(null,null,null)));
    ]]></programlisting><para>Ez a sor létrehoz egy vertikális "teret", és a gyermekeit mind egy sorba rendezi ezen a téren belül.
        A setBackground metódusban a BackgroundFill paraméterként null-t kapott, tehát a háttér transzparens/átlátszó. 
        a BackgroundFill második paramétere a CornerRadii, ami a sarok-lekerekítések rádiuszát/sugarát adja meg, a harmadik pedig az inseteket adja meg, ezek a keretek.
        A használatukhoz be kell importálnunk a javafx.geometry.Insets osztályt.</para>
        <programlisting language="java">String style = "-fx-background-color: rgba(255, 255, 0, 5);";</programlisting>
        <para>Ez egy narancssárgás színárnyalatot kölcsönöz a GREENYELLOW szín mellé., az objektumot később, a setStyle metódussal használjuk fel.
        </para>
        <programlisting language="java"><![CDATA[final javafx.scene.Scene scene = new javafx.scene.Scene(box,800,400,Color.GREENYELLOW);
]]></programlisting><para>A scene lesz a "vászon", ezen foglal helyet minden, ha a szövegdobozok háttérszíne nem lenne fehér, akkor láthatnánk, hogy az egész ablak zöldes-sárga.
</para>
<programlisting language="java"><![CDATA[javafx.scene.control.TreeView<String> stringTree = new StringTree(properties, true, propsEdit);
        stringTree.setEditable(false);
        stringTree.setBackground(new Background(new BackgroundFill(fill, null,null)));]]></programlisting>
        <para>Ez a parancs hoz létre egy fa ágazat menüt,paraméterekként egy listát(properties), egy boolean típusú paramétert(az expanded opció ki és bekapcsolására) és egy TextArea szövegmezőt tartalmaz.
        a setEditable funkció segítségével állíthatjuk be, hogy az ágazatunk szerkeszthető legyen-e.
        Végül itt is beállítjuk a hátteret.</para>
        <programlisting language="java">box.getChildren().add()</programlisting><para>Ez a függvény 
        adja hozzá az üres tárolónkhoz a sorokat.</para>
    </section>



<section>
<title>SamuCam</title>
<para>
Mutassunk rá a webcam (pl. Androidos mobilod) kezelésére ebben a projektben:
https://github.com/nbatfai/SamuCam</para>
<programlisting language="c++"><![CDATA[#include "opencv2/objdetect.hpp"
#include "opencv2/videoio.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/imgproc.hpp"
]]></programlisting><para>
<link xlink:href="https://github.com/opencv/opencv/blob/master/modules/videoio/include/opencv2/videoio.hpp">
https://github.com/opencv/opencv/blob/master/modules/videoio/include/opencv2/videoio.hpp</link>              
     </para>
<programlisting language="c++"><![CDATA[class SamuCam : public QThread
{
    Q_OBJECT

public:
    SamuCam ( std::string videoStream, int width, int height );
    ~SamuCam();

    void openVideoStream();]]></programlisting>
<para>Az opencv segítségével képes a program a kamera használatára, a SamuCam osztály egy QThread objektumot képvisel,
ezen belűl található az openVideoStream, melyet majd a felvétel kezeléséhez használunk a <command>  cv::VideoCapture videoCapture;</command> segítségével.
</para>
<programlisting language="c++"><![CDATA[void SamuCam::openVideoStream()
{
  videoCapture.open ( videoStream );

  videoCapture.set ( CV_CAP_PROP_FRAME_WIDTH, width );
  videoCapture.set ( CV_CAP_PROP_FRAME_HEIGHT, height );
  videoCapture.set ( CV_CAP_PROP_FPS, 10 );
}]]></programlisting>
<para>Itt láthatjuk az openVideoStream felhasználását.
a videoCapture.open indítja el a felvételt, paraméterként pedig egy fájlnevet kap meg.
A metódus először hívja a <command>VideoCapture::release</command>-t, ha a felvétel már folyamatban van.</para>
<para>Alatta beállítjuk a felvétel szélességét és magasságát, valamint az fps rátát.</para>
<programlisting language="c++"><![CDATA[if ( ! videoCapture.isOpened() )
        {
          openVideoStream();
        }
]]></programlisting><para>Ezzel a sorral hívjuk meg a felvételt.</para>
<programlisting language="c++"><![CDATA[void SamuCam::run()
{

  cv::CascadeClassifier faceClassifier;

  std::string faceXML = "lbpcascade_frontalface.xml"; // https://github.com/Itseez/opencv/tree/master/data/lbpcascades

  if ( !faceClassifier.load ( faceXML ) )
    {
      qDebug() << "error: cannot found" << faceXML.c_str();
      return;
    }]]></programlisting><para>Található továbbá a samu::run-ban egy <command>cv::CascadeClassifier</command> is, ez az objektumok értelmezésére hivatott, használatához az objdetect library behívása szükséges.
    </para>
    <para>a faceXML fájl egy osztályozást tárol emberi arcokról,ha a program nem tudja megnyitni a fájlt(mint láthatjuk, a program feltételezi, hogy ez a bizonyos xml fájl azonos mappában található a cpp fájl-al.),
    akkor egy qDebug funkció-n keresztül dob egy hibaüzenetet.
    Ez a Qdebug library-ban található,használatával egyszerűbbé válik a hibák értelmezése.
    Például a <command> QDate::currentDate()</command> metódussal lehetőségünk van a dátum megjelenítésére a hibaüzenetben.</para>
</section>



<section>
<title>BrainB</title>
<para>
Mutassuk be a Qt slot-signal mechanizmust ebben a projektben: https://github.com/nbatfai/esport-talent-search</para>
<programlisting language="c++"><![CDATA[BrainBWin::BrainBWin ( int w, int h, QWidget *parent ) : QMainWindow ( parent )
{

//    setWindowTitle(appName + " " + appVersion);
//    setFixedSize(QSize(w, h));

        statDir = appName + " " + appVersion + " - " + QDate::currentDate().toString() + QString::number ( QDateTime::currentMSecsSinceEpoch() );

        brainBThread = new BrainBThread ( w, h - yshift );
        brainBThread->start();

        connect ( brainBThread, SIGNAL ( heroesChanged ( QImage, int, int ) ),
                  this, SLOT ( updateHeroes ( QImage, int, int ) ) );

        connect ( brainBThread, SIGNAL ( endAndStats ( int ) ),
                  this, SLOT ( endAndStats ( int ) ) );

}
]]></programlisting>
<figure>
            <title>
                A
                <type>brainb</type>
                futás
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/brainb.png" scale="40" />
                </imageobject>
                <textobject>
                    <phrase>
                        A
                        <type>brainb</type>
                        futás
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
<para>ez a slot-signal mechanizmus az objektumok közötti kommunikációt teszi lehetővé.
Ez a meta-object rendszer segítségével lehetséges.
</para>
<link xlink:href="https://wiki.qt.io/New_Signal_Slot_Syntax"><command>Ez a fajta szintaktika már elavultnak számít, helyette itt látható az új szintakszis.</command></link>
<para>Más keretrendszerek callback funkciójához hasonlóan működik,viszont a callback-el ellentétben ez a mechanizmus nem küszködik típus-tartási hibákkal, hiszen <command>csak akkor hajtódik végre a slot-ban helyetfoglaló függvény, ha a jel típusa megegyezik a slot-ban várt típussal.</command>
A slotban található funkció virtuálisként is definiálható, és teljes mértékben egy normál funkcióval megegyező függvény található a slotban.
Tehát ha a heroesChanged függvény végrehajtódik, akkor egy jel küldődik az updateHeroes slotba, és ezzel az updateHeroes függvény is végrehajtásra kerül.
</para>
<programlisting language="c++"><![CDATA[QImage dest ( src.data, src.cols, src.rows, src.step, QImage::Format_RGB888 );
        dest=dest.rgbSwapped();
        dest.bits();

        emit heroesChanged ( dest, heroes[0].x, heroes[0].y );

    }]]></programlisting>
<para>A brainBThread header fájlban találunk rá erre a signál-ra,a draw függvényben.</para>
<para>az endAndStats szignál akkor kerül elküldésre, ha lejár az idő, ezt a slot "elkapja" és végrehajtódik az ugyanezzel a névvel ellátott függvény, amely a következőt jeleníti meg:</para>
<programlisting language="c++"><![CDATA[void BrainBWin::endAndStats ( const int &t )
{

        qDebug()  << "\n\n\n";
        qDebug()  << "Thank you for using " + appName;
        qDebug()  << "The result can be found in the directory " + statDir;
        qDebug()  << "\n\n\n";

        save ( t );
        close();
}]]></programlisting><para>megköszöni az app használatát, kiírja a statisztikák "lelőhelyét", elmenti az időt és végül bezárja az ablakot.
</para>
</section>


<!-- <section>
<title>OOCWC Boost ASIO hálózatkezelése</title>
<para>
Mutassunk rá a scanf szerepére és használatára! https://github.com/nbatfai/robocar-emulator/blob/master/justine/rcemu/src/carlexer.ll</para>
</section>


<section>
<title>OSM térképre rajzolása</title>
<para>Debrecen térképre dobjunk rá cuccokat, ennek mintájára, ahol én az országba helyeztem el a DEAC
hekkereket: https://www.twitch.tv/videos/182262537 (de az OOCWC Java Swinges
megjelenítőjéből:
https://github.com/nbatfai/robocar-emulator/tree/master/justine/rcwin
is
kiindulhatsz, mondjuk az komplexebb, mert ott időfejlődés is van...)</para></section>-->
</chapter>