<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
	
	<section>
<title>Reverse engineering UML osztálydiagram</title>
<para>

UML osztálydiagram rajzolása az első védési C++ programhoz. Az osztálydiagramot a forrásokból
generáljuk (pl. Argo UML, Umbrello, Eclipse UML) Mutassunk rá a kompozíció és aggregáció
kapcsolatára a forráskódban és a diagramon, lásd még: https://youtu.be/Td_nlERlEOs.
https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_6.pdf (28-32 fólia)
</para>
<figure>
            <title>Az <type>LZW UML  </type></title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="mandelbrot/uml_binfa.png" scale="40" />
				  </imageobject>
                <textobject>
                    <phrase>Az <type> LZW UML </type> </phrase>
                </textobject>
            </mediaobject>
        </figure> 
        <para>Az aggregáció egy rész-egész kapcsolatot jelent.
         A fő-objektum fizikailag is tartalmazza, vagy birtokolja a rész-objektumot, 
        általában ezen objektum létezése függésben van a fő-objektumtól.
        Ennek két fajtája lehet, gyenge és erős aggregáció.
        A <command>gyenge aggregáció</command>-ban a rész-objektum létezhet a fő-obj. nélkül is, míg 
        az <command>erős aggregáció</command>-nál ez nem lehetséges.
        Általában az erős aggregáció-t szokták <command>kompozíció</command>-nak nevezni. 
        A <command>gyenge aggr.</command> jele a két osztály között húzott telített egyenes, melynek végén egy üres rombusz található.
        A rombusz azon az oldalon van, amely osztály a fő-objektum.
        Az <command>erős aggr./kompozíció</command> jele is egy vonal, viszont a végén egy telített rombusz található.
        Az UML ábrán megtalálható mindkét típusú asszociáció.
        </para>
</section>

<section>
<title>Forward engineering UML osztálydiagram</title>
<para>UML-ben tervezzünk osztályokat és generáljunk belőle forrást!</para>
<figure>
            <title>Az <type>új UML  </type></title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="mandelbrot/class diagram.png" scale="150" />
				  </imageobject>
                <textobject>
                    <phrase>Az <type> új UML </type> </phrase>
                </textobject>
            </mediaobject>
        </figure> 
        <figure>
            <title>Az <type>új UML  </type></title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="mandelbrot/prob.png" scale="150" />
				  </imageobject>
                <textobject>
                    <phrase>Az <type> új UML </type> </phrase>
                </textobject>
            </mediaobject>
        </figure> 
</section>

<section>
<title>Egy Esettan</title>
<para>A BME-s C++ tankönyv 14. fejezetét (427-444 elmélet, 445-469 az esettan) dolgozzuk fel!</para>
</section>

<section>
<title>BPMN</title>
<para>Rajzoljunk le egy tevékenységet BPMN-ben!
https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_7.pdf (34-47 fólia)</para>
<figure>
            <title>A <type>BPMN ábra</type></title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="mandelbrot/bpmn diagram.png" scale="80" />
				  </imageobject>
                <textobject>
                    <phrase>A <type>BPMN</type> ábra </phrase>
                </textobject>
            </mediaobject>
        </figure> 
        <para>A képen egy regisztrációs folyamat BPMN ábrája látható.(Business Process Model and Notation/ üzleti folyatmodellezés és jelölés)
        Indulunk a <command>regisztráció</command> gomb megnyomásától.
        Ekkor az oldal egy kérést küld a szervernek, amely után egy új lap jelenik meg, ezen a lapon helyezkedik majd el
        a regisztrációhoz szükséges szövegdobozok és utasítások sorozata, na meg persze a <command>regisztráció</command> gomb.
        A szerver válaszában már az egész oldalt küldi el, amelyben az oldal tartalma egészében megtalálható, a felhasználónak csak annyi a dolga, hogy
        megadja a szükséges információkat.
        Ezután két dolog történhet, ha az oldal képes az on-the-spot információ-ellenőrzésre, akkor
        már a <command>regisztráció</command> gomb megnyomása előtt visszajelzést ad, hogy a megadott adatok helyesek-e, esetleg már valaki által foglaltak-e vagy sem.
        A másik lehetőség ugyebár,hogy csak a gomb megnyomása után tudjuk meg, hogy valid adatokat adtunk-e meg.
        A model az első opció szerint lett elkészítve.
        </para>
        <para>Ha minden validálva lett, akkor jöhet a regisztráció.
        A felhasználó újra megnyomja a gombot.
        Ezután a kliens kérést küld a szervernek, amelyben a titkosított adatok is jelen vannak.
        Ez egy keretbe van foglalva, és egy ún. SET/POST kérés-típus kel útra a szerver felé, amely arra kéri 
        a szervert, hogy az adatokat vigye be az adatbázisba, ezzel véglelegítve a regisztrációt.
        Végezetül a szerver visszaigazoló üzenetet küld, amelyben megtaláljuk, hogy a regisztráció sikeres volt-e, vagy egy esetleges szerver-oldali hiba miatt sikertelen.
        Az utóbbi esetben később újrapróbálkozhat a felhasználó, esetleg ha van elérhetőség kitéve az oldalra, ott tájékoztathatja az oldal üzemeltetőjét.

        </para>

</section>

<section>
<title>TEX uml</title>
<para>Valamilyen TeX-es csomag felhasználásával készíts szép diagramokat az OOCWC projektről (pl.
use case és class diagramokat).
</para>
</section>

<section>
<title>BPEL Helló, Világ! - egy visszhang folyamat</title>
<para>
Egy visszhang folyamat megvalósítása az alábbi teljes „videó tutoriál” alapján:
https://youtu.be/0OnlYWX2v_I
</para>
</section>
</chapter>
