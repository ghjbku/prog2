<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Schwarzenegger!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

	<section>
<title>Port scan</title>
<para>Mutassunk rá ebben a port szkennelő forrásban a kivételkezelés szerepére!
https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287</para>
<figure>
            <title>
                A
                <type>socket</type>
                futás
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="schwarz/socket.png" scale="150" />
                </imageobject>
                <textobject>
                    <phrase>
                        A
                        <type>socket</type>
                        futás
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
	
<programlisting language="java"><![CDATA[try {
                
                java.net.Socket socket = new java.net.Socket(args[0], i);
                
                System.out.println(i + " figyeli");
                
                socket.close();
                
            } catch (Exception e) {
                
                System.out.println(i + " nem figyeli");
                
            }]]></programlisting>
        <para>Hogy lássuk, mi az az exception, amit dob, amikor a "nem figyeli" szöveg jelenik meg, ki kell íratnunk az <command>e</command> objektum tartalmát.
        Tehát az előző programkód így bővül:</para>
        <programlisting language="java"><![CDATA[System.out.println(i + " nem figyeli\n" + e);]]></programlisting>
            <figure>
            <title>
                A
                <type>socket</type>
                Exception
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="schwarz/connexc.jpg" scale="100" />
                </imageobject>
                <textobject>
                    <phrase>
                        A
                        <type>socket</type>
                        Exception
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
<para>Ez az exception akkor dobódik, ha valami hiba lépett fel a távoli ip-cím-hez csatlakozáskor.
A mi esetünkben ez a hiba az, hogy nincs figyelő folyamat a cél ip/port együttesen.
<link xlink:href="https://javadoc.scijava.org/Java7/java/net/ConnectException.html">A leírása megtalálható angolul itt.</link>
</para>
         <figure>
            <title>
                A
                <type>socket</type>
                eredménye
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="schwarz/eredmeny.png" scale="350" />
                </imageobject>
                <textobject>
                    <phrase>
                        A
                        <type>socket</type>
                        eredménye
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>Látható, hogy a 631-es porton van figyelő folyamat, tehát a programunk megfelelően működik, hiszen talált egy figyelt portot is.
        Na persze az nem jelentené, hogy hibás a program, ha nem találtunk volna 1 figyelt portot se.</para>
</section>
	<section>
<title>AOP</title>
<para>Szőj bele egy átszövő vonatkozást az első védési programod Java átiratába! (Sztenderd védési
feladat volt korábban.)</para>
<para>források:<link xlink:href="https://github.com/ghjbku/prog2/tree/master/schwarz/Lzw.java">Lzw.java</link>
<link xlink:href="https://github.com/ghjbku/prog2/tree/master/schwarz/LZWBinFa.java">LZWBinFa.java</link>
<link xlink:href="https://github.com/ghjbku/prog2/tree/master/schwarz/atszovo_lzw.aj">atszovo_lzw.aj</link>
</para>


    <figure>
            <title>
                A
                <type>szövés</type>
                eredménye
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="schwarz/atszott.png" scale="350" />
                </imageobject>
                <textobject>
                    <phrase>
                        A
                        <type>szövés</type>
                        eredménye
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>Alul láthatjók, hogy a getAtlag függvény meghívódik a getSzoras függvényen belül, tehát tényleg 2x kell majd viszont látnunk az átszőtt szöveget.
        </para>
         <figure>
            <title>
                A
                <type>szövés</type>
                függvényei
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="schwarz/atszott_fg.png" scale="350" />
                </imageobject>
                <textobject>
                    <phrase>
                        A
                        <type>szövés</type>
                        függvényei
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
<para>Itt látható, hogy a getAtlag és a getSzoras egymás után hívódnak meg.</para>
<programlisting language="java">kiFile.println("mean = " + binFa.getAtlag());
    kiFile.println("var = " + binFa.getSzoras());</programlisting>
<para>Itt pedig láthatjuk az aspectj forráskódot:</para>
<programlisting language="java"><![CDATA[public aspect atszovo_lzw {

    public pointcut fgvHívás(): call(public double LZWBinFa.getAtlag());

   before():fgvHívás(){
        System.out.println("getAtlag meghívása előtt ez a szöveg megjelenik");
    }
}]]></programlisting>
</section>


	<section>
<title>Android Játék
</title>
<para>Írjunk egy egyszerű Androidos „játékot”! Építkezzünk például a 2. hét „Helló, Android!” feladatára!</para>
	</section>


	<section>
<title>Junit teszt</title>
<para>A https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat
poszt kézzel számított mélységét és szórását dolgozd be egy Junit tesztbe (sztenderd védési feladat
volt korábban).</para>
	</section>



	<section>
<title>OSCI</title>
<para>Készíts egyszerű C++/OpenGL-es megjelenítőt, amiben egy kocsit irányítasz az úton. A kocsi
állapotát minden pillanatban mentsd le. Ezeket add át egy Prolog programnak, ami egyszerű reflex
ágensként adjon vezérlést a kocsinak, hasonlítsd össze a kézi és a Prolog-os vezérlést. Módosítsd
úgy a programodat, hogy ne csak kézzel lehessen vezérelni a kocsit, hanem a Prolog reflex ágens
vezérelje!</para>
	</section>

</chapter>
